---
title: "Fire Analysis"
author: "Michael Pennino"
date: "January 11, 2018"
output: html_document
editor_options: 
  chunk_output_type: console
---

# This Script compares Drinking Water Violations after a wildfire with drinking water violations pre-wildfire
*   Data on wildfires comes from: the Monitoring Trends in Burn Severity dataset which compiles burn area and severity information across the U.S. for each year from 1984 through 2015 (https://www.mtbs.gov/)
*   The Burn data was summarized for each NHD stream catchment and upstream watershed using the StreamCat algorithm. 
*   The code below matches the location of Public drinkng water system violation data with the catchments that have wildfires.  The year of the wildfire and year of the violation are also matched.  And years without violation or wildfires are also inded for each catchment. 
*   Different post-burn windows area used to categorize a year as being pre-or post burn
*   For example, a 3-year window means the first 3 years after a year with a wildfire are categarized as post-burn, but aany year beyond the 3rdh year will be categorized as pre-burn as long as no new wildfires.
*   This Excludes Burn YEAR and only looks at years post burn vs. years pre burn.
*   The relevant Chunk that removes burn year = "***If remove year burned"

* Note that Number_Sites goes down as burn year window increases because some sites are categorized as burned for every year and thus that site is removed from the analysis if there are no non-burned years to compare with. 
* MCL for TTHM = 0.08 mg/L
* MCL for HAA5 = 0.06 mg/L

* This code calcuates violation rate (# violations per system per year)

# Load SDWIS Data
```{r}

m_dir = '...'
D_dir = 'D:/'
one_dir = '...'

# Total number of violations per PWSID

all_avg = read.csv(paste0(m_dir,'Projects/SDWIS/All_Contaminants/Violations_MCL_ALL_Contaminants_Average_ActiveInactive_2017Q4.csv'))  
all_single = read.csv(paste0(m_dir,'Projects/SDWIS/All_Contaminants/Violations_MCL_ALL_Contaminants_Single_ActiveInactive_2017Q4.csv'))  
SDWIS_all = rbind(all_avg,all_single)
# i think you can ignore the warning
names(SDWIS_all)[1] = "PWSID"

# The warming is because all_avg$Violation.Measure is a factor, but all_single is numeric, can ignore it or change it with code below, but not necessary. 
# all_avg$Violation.Measure =
#   as.numeric(as.character(all_avg$Violation.Measure))

# Creating date column in the correct format
SDWIS_all$DATE = as.Date(SDWIS_all$Compliance.Period.Begin.Date, format = "%d-%B-%y")

# Subset out just NO3 & NO3-NO2
# Add YEAR column
library(lubridate) 
SDWIS_all$YEAR = year(SDWIS_all$DATE)

# copy this field
SDWIS_all$Contaminant = SDWIS_all$Contaminant.Name

# change value so that both "Nitrate"="NO3" & "Nitrate-Nitrite"="NO3"
library(plyr) # new name is on right
SDWIS_all$Contaminant = revalue(SDWIS_all$Contaminant, 
                                c("Nitrate"="NO3","Nitrate-Nitrite"="NO3"))
detach(package:plyr)


sys = readRDS(paste0(m_dir,'Projects/SDWIS/PWS_All/SDWIS_Systems_ALL_2017Q3.rds'))

PWS_inventory_2017_gwsw = unique(sys[,c('PWSID','GW.or.SW')])

```


# Load Fire Data
* The files are listed in the location below with file names of MTBS_RegionX.  Each file contains the percent of the catchment and the percent of the watershed that burned by year between 1984 and 2015.
* subset out only catchments that have had at least one burned year
```{r}


# MTBS01 = read.csv('C:/.../MTBS_Region01.csv')
# MTBS02 = read.csv('C:/.../MTBS_Region02.csv')
# MTBS03N = read.csv('C:/.../MTBS_Region03N.csv')
# MTBS03S = read.csv('C:/.../MTBS_Region03S.csv')
# MTBS03W = read.csv('C:/.../MTBS_Region03W.csv')
# MTBS04 = read.csv('C:/.../MTBS_Region04.csv')
# MTBS05 = read.csv('C:/.../MTBS_Region05.csv')
# MTBS06 = read.csv('C:/.../MTBS_Region06.csv')
# MTBS07 = read.csv('C:/.../MTBS_Region07.csv')
# MTBS01 = read.csv('C:/.../MTBS_Region01.csv')
# MTBS01 = read.csv('C:/.../MTBS_Region01.csv')
# MTBS08 = read.csv('C:/.../MTBS_Region08.csv')
# MTBS09 = read.csv('C:/.../MTBS_Region09.csv')
# MTBS10L = read.csv('C:/.../MTBS_Region10L.csv')
# MTBS10U = read.csv('C:/.../MTBS_Region10U.csv')
# MTBS11 = read.csv('C:/.../MTBS_Region11.csv')
# MTBS12 = read.csv('C:/.../MTBS_Region12.csv')
# MTBS13 = read.csv('C:/.../MTBS_Region13.csv')
# MTBS14 = read.csv('C:/.../MTBS_Region14.csv')
# MTBS15 = read.csv('C:/.../MTBS_Region15.csv')
# MTBS16 = read.csv('C:/.../MTBS_Region16.csv')
# MTBS17 = read.csv('C:/.../MTBS_Region17.csv')
# MTBS18 = read.csv('C:/.../MTBS_Region18.csv')


# MTBS01$burnsum = rowSums(MTBS01[,6:69])
# MTBS01$burncat = ifelse(MTBS01$burnsum > 0,1,0)
# MTBS01 = MTBS01[MTBS01$burncat == 1,]
# MTBS01 = MTBS01[,1:69]

burn_files <- dir(paste0(m_dir,'Data/StreamCat/'),
                 pattern=glob2rx("MTBS_Region*.csv")) #where you have your files

f_dir = paste0(m_dir,'Data/StreamCat/')

burn = read.csv(paste0(m_dir,'Data/StreamCat/MTBS_Region01.csv'))[1,]
burn[1,] = 0 # create a dummy dataframe with first row

timeIn = Sys.time()
for(i in 1:length(burn_files)) {
  # Import single hydroregion
  Bdata = read.csv(paste0(f_dir,burn_files[i]))
  
  # Keep only COMIDs with burn data 
  Bdata$burnsum = rowSums(Bdata[,6:69])
  Bdata$burncat = ifelse(Bdata$burnsum > 0,1,0)
  Bdata = Bdata[Bdata$burncat == 1,]
  Bdata = Bdata[,1:69]
  
  # Compile the hydroregions
  burn = rbind(burn,Bdata) 
}
timeOut = Sys.time(); timeOut - timeIn
# Time difference of 1.278271 mins

# remove the first (dummy) row
burn = burn[-1,]

dim(burn)
# 510918     69

# Export COMIDS that have % Burn
#write.csv(burn,'C.../Burned_Catchments.csv',row.names=F)




```


# Load Catchment Data
* This data was first combined in ArcGIS and then modified created in previous script. 
```{r}

# Import all the facilities located in 95% in 1 catchment
loc1 <- foreign::read.dbf(paste0(one_dir,"ArcGIS/SDWIS_Model/SDWIS/Spatial/Catchment_Analysis/SDWIS_Facilities_95in_1catchment.dbf")) 
names(loc1)[which(colnames(loc1)=="PWS_FAC_")] = "PWS_FAC_COMID"
names(loc1)[which(colnames(loc1)=="PWS_FACI")] = "PWS_FACID"

```


#*******************************************

# Select SDWIS Contaminant
* If running SDWIS data then skip next 2 chunks
```{r Importing SDWIS Data}
# For regulation Information for each constituent:
# https://www.ecfr.gov/cgi-bin/text-idx?SID=276258188c64033cb302c0d165c57c7f&mc=true&node=pt40.25.141&rgn=div5#se40.25.141_12

# See:
# ยง141.64   Maximum contaminant levels for disinfection byproducts.
# ยง141.23   Inorganic chemical sampling and analytical requirements.

#()()()()()()()()()()()()()()()()()()()()()()()()
# Choose Starting YEAR
YYYY = 1994 # 1994 or 2004
CONSTITUENT = "NO3"
#CONSTITUENT = "TTHM"
#CONSTITUENT = "Total Haloacetic Acids (HAA5)"

# Choose Constituent (the Start year in parenthese)
# NO3 (1994), Arsenic (2006), Cadmium (1994), Chromium(1994), Mercury(1994), Nickel(1994)

# Disinfectant Biproducts: 
# TTHM (2004), Total Haloacetic Acids (HAA5) (2004), Chlorite (2004), Bromate (2004)

#()()()()()()()()()()()()()()()()()()()()()()()()


# Check for specific contaminants associated with Contaminants


# Subset out just the Specific CONSTITUENT
SDWIS = SDWIS_all[SDWIS_all$Contaminant == CONSTITUENT,]
SDWISYY = SDWIS[SDWIS$YEAR >= YYYY & SDWIS$YEAR <= 2015,]
nrow(SDWISYY) # 23099, 4335 (2013)

# Add quarter
SDWISYY$QUARTER = quarter(SDWISYY$DATE)
# head(SDWISYY[8000:23099,c('DATE',"QUARTER")])

# Getting just unique Systems and years
SDWISYY_unq = unique(SDWISYY[,c("PWSID","YEAR")])
nrow(SDWISYY_unq) # 12366, 2046 (2013)

# For separating GW vs. SW
SDWISYY_gwsw = SDWISYY[,c("PWSID","GW.or.SW")]

```


#*******************************************
#*******************************************

# Process Fire Data

# Subset out COMIDs that have % Burned
```{r}

# Checking which columns of burn data are associated with what years
# Keep only years 1994-2015
which(names(burn)=="MTBS_1994Cat") # 16
which(names(burn)=="MTBS_2015Cat") # 37
which(names(burn)=="MTBS_1994Ws") #  48
which(names(burn)=="MTBS_2015Ws") # 69

which(names(burn)=="MTBS_2006Cat") # 28
which(names(burn)=="MTBS_2006Ws") # 60
which(names(burn)=="MTBS_1984Ws") # 38

# Assigning column number for specific year
y1 = 6+YYYY-1984 # gives column position based on start year
y2 = 38+YYYY-1984

#burn2 = burn[,c(1,16:37,48:69)]
burn2 = burn[,c(1,y1:37,y2:69)]

# Calculate row sum to determine which rows (catchments) don't have any burn data
burn2$rsum = rowSums(burn2[,2:ncol(burn2)], na.rm = T)

# Subset out just the catchments that have burned
burn2 = burn2[burn2$rsum > 0, ]

burn2 = burn2[complete.cases(burn2[,c("COMID")]),] # keeps all rows without NA in specified column

nrow(burn2) # 474260
nrow(burn) # 2647057


```


# Melt Burn data to have new row for each year with burn data per COMID
```{r}

# Remove rsum

burn3 = burn2[,1:ncol(burn2)-1]

yr = seq(from=YYYY, to=2015,by=1)

library(reshape)

burn4 = melt(burn3, id = 'COMID')
nrow(burn4) # 20867440

# nrow should be 
length(yr)*nrow(burn3)*2 # 20867440

# Change value to perc_burn
burn4$perc_burn = burn4$value

# Remove perc_burn that is zero
burn5 = burn4[burn4$perc_burn >0,]
nrow(burn5) # 2322919, so there are over 2 million COMIDs in specific years with burn

# Add Year Column (by extracting numeric from burn4$variable string)

burn5$YEAR = as.numeric(gsub("\\D", "", as.character(burn5$variable))) 

burn6 = burn5[,c('COMID','YEAR','variable','perc_burn')]


```


#*******************************************
# Process SDWIS or UCMR Data - # Violations

# 1. Associate COMID with each violation PWSID
* Using all violations, from each quarter
```{r Calculate % of PWSID and Violations that have COMID}
#################

library(dplyr)
# Subset violations data & get unique violations per year
violYY = SDWISYY[,c("PWSID","YEAR","QUARTER")]
violYY_uniq = unique(violYY)
nrow(violYY_uniq) # 21214, 
nrow(violYY) # 23099, 

# Number of violations per year and PWSID
viol_yr = violYY_uniq %>% group_by(PWSID,YEAR) %>% summarise(Total_Viol = n())


# Distinguish GW vs. SW
temp_gwsw = unique(merge(viol_yr,PWS_inventory_2017_gwsw[,c("PWSID","GW.or.SW")],
                         by='PWSID',all.x=T))
viol_yr_gwsw = unique(temp_gwsw[complete.cases(temp_gwsw[,c("GW.or.SW")]),])
viol_yr_gw = temp_gwsw[temp_gwsw$GW.or.SW == "Groundwater",]
viol_yr_sw = temp_gwsw[temp_gwsw$GW.or.SW == "Surface water",]


# Subset fac data
loc2 = loc1[, c('PWSID','COMID')] # 'PWS_FAC_COMID', 
loc2 = unique(loc2) 

# Merge on COMIDs
viol_yr_sw2 <- merge(viol_yr_sw,loc2, by="PWSID",all.x=TRUE)  

# Remove NAs
viol_yr_sw3 = viol_yr_sw2[complete.cases(viol_yr_sw2[,c("COMID")]),] # keeps all rows without NA in specified column

viol_yr_sw3 = unique(viol_yr_sw3)
nrow(viol_yr_sw3) # 267 (NO3), 63 (As)

#**********************************
# What % of PWSIDs have COMIDs
100*nrow(as.data.frame(unique(viol_yr_sw3$PWSID)))/nrow(as.data.frame(unique(viol_yr_sw$PWSID)))
#24.17582% of unique PWSIDs with a violation have COMID 

#**********************************
##$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# What % of Violations have COMIDs
nrow(viol_yr_sw) # Number of violations = 21214 (1994-2016), 4071 (2013)
nrow(unique(viol_yr_sw3[,c("PWSID","YEAR")])) # number of violations with COMID = 267 
100*nrow(unique(viol_yr_sw3[,c("PWSID","YEAR")]))/nrow(viol_yr_sw)
#21.57534% of violations have a COMID 



####

```


# 2. Number of Violations per Catchment Per Year * Systems
```{r}
library(dplyr)
cat_viol_yr_sw <- viol_yr_sw3 %>% 
  dplyr::group_by(COMID,YEAR) %>% 
  summarize(Viol.Freq =sum(Total_Viol),
            Sys.Freq =n_distinct(PWSID)) 
cat_viol_yr_sw$Viol.Rate = cat_viol_yr_sw$Viol.Freq / cat_viol_yr_sw$Sys.Freq
nrow(cat_viol_yr_sw) # 256 (NO3), 63 (As), 3108 (TTHM) 



```


# 3. Mean Concentration per Catchment
```{r}


conc = SDWISYY[,c("PWSID","YEAR","Violation.Measure","Unit.Of.Measure.Code")]
concYY = conc[conc$YEAR >=YYYY & conc$YEAR <= 2017,]

# Extract out only violations with concentration as MG/L
levels(factor(concYY$Unit.Of.Measure.Code))
mgYY = concYY[concYY$Unit.Of.Measure.Code == "MG/L",]

nrow(concYY) # 21595
nrow(mgYY) # 20373

# of all concentrations
100*nrow(mgYY)/nrow(concYY) # 72.52262%


# *** Only using the concentrations with the units of mg/L

#concYY$Violation.Measure = as.numeric(concYY$Violation.Measure)
mgYY$Violation.Measure = as.numeric(as.character(mgYY$Violation.Measure))

summary(mgYY$Violation.Measure)

# remove concentrations >1000 mg/L
mgYY = mgYY[mgYY$Violation.Measure < 1000,]
summary(mgYY$Violation.Measure)

# Distinguish GW vs. SW
mgYY_gwsw = unique(merge(mgYY,PWS_inventory_2017_gwsw,
                         by='PWSID',all.x=T))
mgYY_gwsw = unique(mgYY_gwsw[complete.cases(mgYY_gwsw[,c("GW.or.SW")]),])
mgYY_gw = mgYY_gwsw[mgYY_gwsw$GW.or.SW == "Groundwater",]
mgYY_sw = mgYY_gwsw[mgYY_gwsw$GW.or.SW == "Surface water",]


# Merge on COMIDs based on same PWSID
loc2 = loc1[, c('PWSID','COMID')] 
loc2 = unique(loc2) 

concYY_fac_gwsw = merge(mgYY_gwsw,loc2,by="PWSID",all.x=T)
concYY_fac_gw = merge(mgYY_gw,loc2,by="PWSID",all.x=T)
concYY_fac_sw = merge(mgYY_sw,loc2,by="PWSID",all.x=T)

# remove NA's
concYY_fac_gwsw2 = concYY_fac_gwsw[complete.cases(concYY_fac_gwsw[,c("COMID")]),] 
concYY_fac_gw2 = concYY_fac_gw[complete.cases(concYY_fac_gw[,c("COMID")]),] 
concYY_fac_sw2 = concYY_fac_sw[complete.cases(concYY_fac_sw[,c("COMID")]),] 

# % with COMIDs
100*nrow(as.data.frame(unique(concYY_fac_gwsw2$PWSID))) /
  nrow(as.data.frame(unique(concYY_fac_gwsw$PWSID)))  # 56.56028%
100*nrow(as.data.frame(unique(concYY_fac_gw2$PWSID))) /
  nrow(as.data.frame(unique(concYY_fac_gw$PWSID)))  # 57.89959%
100*nrow(as.data.frame(unique(concYY_fac_sw2$PWSID))) /
  nrow(as.data.frame(unique(concYY_fac_sw$PWSID)))  # 22.35294%

# Find the mean concentration per catchment
# Unlike with vilations, I can't give a zero for years without a vilation concentration because the concentration is below 10, but not necessarily zero.

library(dplyr)
concYY_cat_gwsw = concYY_fac_gwsw2 %>% dplyr::group_by(COMID,YEAR) %>% summarize(Viol.Conc = mean(Violation.Measure))

concYY_cat_gw = concYY_fac_gw2 %>% dplyr::group_by(COMID,YEAR) %>% summarize(Viol.Conc = mean(Violation.Measure))

concYY_cat_sw = concYY_fac_sw2 %>% dplyr::group_by(COMID,YEAR) %>% summarize(Viol.Conc = mean(Violation.Measure))

nrow(concYY_cat_gwsw) # 1836, (680 in 2013-16) number of catchments with concentration data
nrow(concYY_cat_gw) # 1783
nrow(concYY_cat_sw) # 56




```




#***********************************




# Associate Burn data with violation data for each year
```{r}

viol_burn = merge(cat_viol_yr_sw,burn6,by=c("COMID","YEAR"),all.x=T)

nrow(viol_burn) # 256

viol_burn2 = viol_burn[complete.cases(viol_burn[,c("perc_burn")]),] 
nrow(viol_burn2) # 20

# Figure out why there are no Catchment values, just Watershed Values
test = burn[burn$COMID == 13260237,]
# This means that there were not fires directly in the catchments that have PWSs, but there were firest in watersheds upstream of those catchments.  


# How many unique catchments have burn in or upstream
nrow(as.data.frame(unique(burn6$COMID))) # 474260 

# How many unique catchments have SW Violations
nrow(as.data.frame(unique(cat_viol_yr_sw$COMID))) # 77 

# How many unique catchments have both fire upstream and SW violation?
nrow(as.data.frame(unique(viol_burn2$COMID))) # 10 


```

# Associate Burn data with violation Concentrations for each year
```{r}

conc_burn = merge(concYY_cat_sw,burn6,by=c("COMID","YEAR"),all.x=T)

nrow(conc_burn) # 4796 (gwsw), 200 (sw)

conc_burn2 = conc_burn[complete.cases(conc_burn[,c("perc_burn")]),] 
nrow(conc_burn2) # 68 (gwsw), 2 (sw)


```



# plot burn vs. Viol freq
```{r}
plot(viol_burn2$Viol.Rate ~ viol_burn2$perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS Per Catchment")


# FOR NITRATE
# looks like getting opposite trend, when should get positive relationship. 
# These sites are in the following states: WY, TX, NC, MT, CA, ID

# For As
# Only have 4 points to plot, but also may have negative slope.

# For Cadmium
# No catchments with SW violations 

# For Chromium
# No catchments with SW violations 

# For Mercury
# No catchments with SW violations 

 

```

# plot burn vs. Viol conc
```{r}
plot(conc_burn2$Viol.Conc ~ conc_burn2$perc_burn,
     xlab="Percent Burned", ylab="Mean Concentration Per Catchment (mg/L)")

# plot without outlier
conc_burn3 = conc_burn2[conc_burn2$Viol.Conc <
                          max(conc_burn2$Viol.Conc),]

plot(conc_burn3$Viol.Conc ~ conc_burn3$perc_burn,
     xlab="Percent Burned", ylab="Mean Concentration Per Catchment (mg/L)")


# FOR NITRATE
# only 2 datapoints


# For As


# For Cadmium


# For Chromium


# For Mercury


 

```

#**********************************************

# Temporal
```{r}


# How many unique COMIDs have SW violations
nrow(as.data.frame(unique(cat_viol_yr_sw$COMID))) #  79

# Fill out zeros for years there are no violations in each Catchment
# Add Zero Violations for the years that a county has no violation
temp = cat_viol_yr_sw
vals <- expand.grid(COMID = unique(temp$COMID),
                    YEAR = unique(temp$YEAR))
cat_viol_yr_sw2 = merge(vals,temp,all = TRUE)

# convert NA's to zero
cat_viol_yr_sw2[is.na(cat_viol_yr_sw2)] <- 0
# I am typing and and k and d tye da tyep d a 


# Merge on Burn Data
viol_burn2 = merge(cat_viol_yr_sw2,burn6[,c('COMID','YEAR','perc_burn')],
                   by=c("COMID","YEAR"),all.x=T)

# I amd typingalkjlkasj  jasldkjlaksdkjaslk
########################################
# Subset out just COMIDs with burns
selectedRows  = (viol_burn2$COMID %in% burn6$COMID) # rows not matching
viol_burn3 = viol_burn2[selectedRows,]


# convert NA's to zero
viol_burn3[is.na(viol_burn3)] <- 0


# How many unique COMIDs have SW violations & Burn Data
nrow(as.data.frame(unique(viol_burn3$COMID))) # 5

# Put 1 or 0 for burn or not
viol_burn3$burned = ifelse(viol_burn3$perc_burn > 0, 1,0)

# Remove perc_burn
viol_burn4 = subset(viol_burn3, select=-c(perc_burn))

# Make sure have unique Rows
viol_burn4 = unique(viol_burn4)


```




# plot temporal
```{r}

library(ggplot2)

###############################################################
# Plot 

# Randomly select a row
temp_id = viol_burn4[sample(nrow(viol_burn4), 1), ]$COMID

temp_df = viol_burn4[viol_burn4$COMID == temp_id,]

#burn_yr = as.data.frame(temp_df[temp_df$burned ==1,]$YEAR)
#names(burn_yr)[1] = "burn_yr"

# Fill out zeros for years there are no violations in each Catchment
# Add Zero Violations for the years that a county has no violation

burn_yr = temp_df[,c('YEAR','burned')]
burn_yr$burned = ifelse(burn_yr$burned == 1,burn_yr$YEAR,NA)
burn_yr = burn_yr[,2]
names(burn_yr)[1] = "burn_yr"


ggplot(temp_df, aes(YEAR)) + 
  geom_line(size=2, aes(y= Viol.Rate,
                color=factor("Viol.Rate",labels="Violations per PWS Per Catchment"))) + 
  geom_vline(aes(xintercept=as.numeric(burn_yr)),
                linetype=1, colour="red")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  labs(x="",y="Value")+
  #xlim(temp_df$YEAR[1], 2015)+
  #scale_x_continuous(breaks=seq(temp_df$YEAR[1], 2015, 1),expand = c(0, 0))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=20))+
  theme(plot.title=element_text(size=20))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))+ # add axis lines
  theme(legend.position="top",legend.direction="vertical")+
  theme(legend.key = element_blank())+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=20))+
  theme(plot.margin= unit(c(0,1,0,0),"cm"))

temp_df[temp_df$burn_yr ==1,]$YEAR


  # geom_line(size=2, aes(y= burn, 
  #               color=factor("burn",labels="If Catchment was Burned"))) +
 
  #geom_point(size=2.5,shape=8,aes(y= Viol.Rate))+
  #geom_point(size=2.5,shape=8,aes(y= burn))+
  # geom_vline(aes(y= burn, 
  #                color=factor("burn",labels="If Catchment was Burned")))+



```


# Before&After-Violations
* This method currently doesn't take into consideration transition from between sites
* And it looses data when have multiple burn years in a row (these are thrown out in current code)
* Just use Method 2 below
```{r}

# Flag the burns where there are no burns for 3 years before and after the burn. 

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# 2 years before and after
viol_burn4$BEFORE_AFTER2 = 0
for (i in 3:nrow(viol_burn4)-2) { 
  if(viol_burn4$burned[i] == 1 && 
     viol_burn4$burned[i-1]==0 && 
     viol_burn4$burned[i-2]==0 && 
     viol_burn4$burned[i+1]==0 && 
     viol_burn4$burned[i+2]==0){
    viol_burn4$BEFORE_AFTER2[i] = 1
  } else {
    viol_burn4$BEFORE_AFTER2[i] = 0 
  }
}

# 3 years before and after
viol_burn4$BEFORE_AFTER3 = 0
for (i in 4:(nrow(viol_burn4)-3)) {
  if(viol_burn4$burned[i] == 1 && 
     viol_burn4$burned[i-1]==0 && 
     viol_burn4$burned[i-2]==0 && 
     viol_burn4$burned[i-3]==0 && 
     viol_burn4$burned[i+1]==0 && 
     viol_burn4$burned[i+2]==0 &&
     viol_burn4$burned[i+3]==0){
    viol_burn4$BEFORE_AFTER3[i] = 1
  } else {
    viol_burn4$BEFORE_AFTER3[i] = 0 
  }
}


# 5 years before and after
viol_burn4$BEFORE_AFTER5 = 0
for (i in 6:(nrow(viol_burn4)-5)) {
  if(viol_burn4$burned[i] == 1 && 
     viol_burn4$burned[i-1]==0 && 
     viol_burn4$burned[i-2]==0 && 
     viol_burn4$burned[i-3]==0 &&
     viol_burn4$burned[i-4]==0 &&
     viol_burn4$burned[i-5]==0 &&
     viol_burn4$burned[i+1]==0 && 
     viol_burn4$burned[i+2]==0 &&
     viol_burn4$burned[i+3]==0 &&
     viol_burn4$burned[i+4]==0 &&
     viol_burn4$burned[i+5]==0){
    viol_burn4$BEFORE_AFTER3[i] = 1
  } else {
    viol_burn4$BEFORE_AFTER3[i] = 0 
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# for (i in 1:(nrow(df)-3)) {
#   if(df$YEAR[i] == 2015 &
#      df$burned[i] == 1 &
#      df$burned[i+3] == 0){  # if 1994 for next site is burned, then don't change 
#       df$AFTER3[i+3] = 0
#   }
# }

####################################################################
# Calculate Average Violations before and after 

# For 2 years
viol_burn4$Viol.Rate.B2 = NA
viol_burn4$Viol.Rate.A2 = NA
for (i in 3:nrow(viol_burn4)-2) { 
  if(viol_burn4$BEFORE_AFTER2[i] == 1){
    viol_burn4$Viol.Rate.B2[i] =       # Mean violations before     
      mean(viol_burn4$Viol.Rate[i-2]:viol_burn4$Viol.Rate[i-1]) 
    viol_burn4$Viol.Rate.A2[i] =       # Mean violations after
      mean(viol_burn4$Viol.Rate[i+1]:viol_burn4$Viol.Rate[i+2])  
  } #else {
    #viol_burn4$Viol.Rate.B3[i] = NA
  #}
}

# For 3 years
viol_burn4$Viol.Rate.B3 = NA
viol_burn4$Viol.Rate.A3 = NA
for (i in 4:nrow(viol_burn4)-3) { 
  if(viol_burn4$BEFORE_AFTER3[i] == 1){
    viol_burn4$Viol.Rate.B3[i] =       # Mean violations before     
      mean(viol_burn4$Viol.Rate[i-3]:viol_burn4$Viol.Rate[i-1]) 
    viol_burn4$Viol.Rate.A3[i] =       # Mean violations after
      mean(viol_burn4$Viol.Rate[i+1]:viol_burn4$Viol.Rate[i+3])  
  } #else {
    #viol_burn4$Viol.Rate.B3[i] = NA
  #}
}



# For 5 years
viol_burn4$Viol.Rate.B5 = NA
viol_burn4$Viol.Rate.A5 = NA
for (i in 6:nrow(viol_burn4)-5) { 
  if(viol_burn4$BEFORE_AFTER5[i] == 1){
    viol_burn4$Viol.Rate.B5[i] =       # Mean violations before     
      mean(viol_burn4$Viol.Rate[i-5]:viol_burn4$Viol.Rate[i-1]) 
    viol_burn4$Viol.Rate.A5[i] =       # Mean violations after
      mean(viol_burn4$Viol.Rate[i+1]:viol_burn4$Viol.Rate[i+5])  
  } #else {
    #viol_burn4$Viol.Rate.B3[i] = NA
  #}
}



```




# MEAN
```{r}

# Average Violations Before burn 3 years

mean(viol_burn4$Viol.Rate.B2,na.rm=T) # 0.1388889
mean(viol_burn4$Viol.Rate.A2,na.rm=T) # 0.1944444

mean(viol_burn4$Viol.Rate.B3,na.rm=T) # 0.05555556
mean(viol_burn4$Viol.Rate.A3,na.rm=T) # 0.3888889

mean(viol_burn4$Viol.Rate.B5,na.rm=T) # NaN
mean(viol_burn4$Viol.Rate.A5,na.rm=T) # NaN

```



# Box Plots - for 2 years
```{r}

before = as.data.frame(viol_burn4$Viol.Rate.B2)
names(before)[1] = "Viol.Rate"
before = as.data.frame(before[complete.cases(before[,c("Viol.Rate")]),]) 
names(before)[1] = "Viol.Rate"
before$when = "before"

after = as.data.frame(viol_burn4$Viol.Rate.A2)
names(after)[1] = "Viol.Rate"
after = as.data.frame(after[complete.cases(after[,c("Viol.Rate")]),]) 
names(after)[1] = "Viol.Rate"
after$when = "after"

before_after = rbind(before,after)

before_after$when<-factor(before_after$when, levels=c("before", "after"))

boxplot(before_after$Viol.Rate~before_after$when,
        ylab="Mean Violation Frequency")



```


# Box Plots - for 3 years
```{r}

before = as.data.frame(viol_burn4$Viol.Rate.B3)
names(before)[1] = "Viol.Rate"
before = as.data.frame(before[complete.cases(before[,c("Viol.Rate")]),]) 
names(before)[1] = "Viol.Rate"
before$when = "before"

after = as.data.frame(viol_burn4$Viol.Rate.A3)
names(after)[1] = "Viol.Rate"
after = as.data.frame(after[complete.cases(after[,c("Viol.Rate")]),]) 
names(after)[1] = "Viol.Rate"
after$when = "after"

before_after = rbind(before,after)

before_after$when<-factor(before_after$when, levels=c("before", "after"))

boxplot(before_after$Viol.Rate~before_after$when,
        ylab="Mean Violation Frequency")



```



# T test before and after
```{r}

shapiro.test(viol_burn4$Viol.Rate.B3)
shapiro.test(viol_burn4$Viol.Rate.B3)


t.test(viol_burn4$Viol.Rate.B3,viol_burn4$Viol.Rate.A3)
# p-value = 0.1123

t.test(viol_burn4$Viol.Rate.B2,viol_burn4$Viol.Rate.A2)
# p-value = 0.5767

wilcox.test(viol_burn4$Viol.Rate.B3,viol_burn4$Viol.Rate.A3)

```

# Method 2 - Violations
* categorize as periods after burn and periods without burn
* after burn = years 1-3 directly after a year burned  
* if it burns multiple years in row, then extend the period for after burn
* periods without burn have to be at least 3 years post burn, up until year before a burn. 
* For Burn Year including the actual burn year in averages

```{r}

df = viol_burn4[,c(1,2,5,6)]

# 3 years after

df$AFTER3 = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER3[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER3[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER3[i+3] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER3[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}



# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER3 that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-3)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+3] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER3[i+3] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}



#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$NOBURN == 1,]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER3
mean(df[df$AFTER3 == 1,]$Viol.Rate) # 0.3608247


#*********************************************************************
# Box Plots
df$BURN_NOBURN = ifelse(df$NOBURN == 1,'NOBURN','BURN')

boxplot(df$Viol.Rate~df$BURN_NOBURN,
        ylab="Mean Violation Frequency")


#*********************************************************************
shapiro.test(df$Viol.Rate) # p-value < 2.2e-16


t.test(df$Viol.Rate~df$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df$Viol.Rate~df$BURN_NOBURN)
# p-value = 0.0001757

```


#*************************************

# CONCENTRATIONS

# Temporal - Conc
```{r}


# How many unique COMIDs have SW violations
nrow(as.data.frame(unique(concYY_cat_sw$COMID))) #  79

# Fill out zeros for years there are no violations in each Catchment
# Add Zero Violations for the years that a county has no violation
temp = concYY_cat_sw
vals <- expand.grid(COMID = unique(temp$COMID),
                    YEAR = unique(temp$YEAR))
concYY_cat_sw2 = merge(vals,temp,all = TRUE)

# convert NA's to zero
concYY_cat_sw2[is.na(concYY_cat_sw2)] <- 0



# Merge on Burn Data
conc_burn2 = merge(concYY_cat_sw2,burn6[,c('COMID','YEAR','perc_burn')],
                   by=c("COMID","YEAR"),all.x=T)



# Subset out just COMIDs with burns
selectedRows  = (conc_burn2$COMID %in% burn6$COMID) # rows not matching
conc_burn3 = conc_burn2[selectedRows,]


# convert NA's to zero
conc_burn3[is.na(conc_burn3)] <- 0


# How many unique COMIDs have SW violations & Burn Data
nrow(as.data.frame(unique(conc_burn3$COMID))) #  14

# Put 1 or 0 for burn or not
conc_burn3$burned = ifelse(conc_burn3$perc_burn > 0, 1,0)

# Remove perc_burn
conc_burn4 = subset(conc_burn3, select=-c(perc_burn))

# Make sure have unique Rows
conc_burn4 = unique(conc_burn4)





```

# Before&After-Concentrations
* This method currently doesn't take into consideration transition from between sites
* And it looses data when have multiple burn years in a row (these are thrown out in current code)
* Just use Method 2 below
```{r}

# Flag the burns where there are no burns for 3 years before and after the burn. 

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# 2 years before and after
conc_burn4$BEFORE_AFTER2 = 0
for (i in 3:nrow(conc_burn4)-2) { 
  if(conc_burn4$burned[i] == 1 && 
     conc_burn4$burned[i-1]==0 && 
     conc_burn4$burned[i-2]==0 && 
     conc_burn4$burned[i+1]==0 && 
     conc_burn4$burned[i+2]==0){
    conc_burn4$BEFORE_AFTER2[i] = 1
  } else {
    conc_burn4$BEFORE_AFTER2[i] = 0 
  }
}

# 3 years before and after
conc_burn4$BEFORE_AFTER3 = 0
for (i in 4:(nrow(conc_burn4)-3)) {
  if(conc_burn4$burned[i] == 1 && 
     conc_burn4$burned[i-1]==0 && 
     conc_burn4$burned[i-2]==0 && 
     conc_burn4$burned[i-3]==0 && 
     conc_burn4$burned[i+1]==0 && 
     conc_burn4$burned[i+2]==0 &&
     conc_burn4$burned[i+3]==0){
    conc_burn4$BEFORE_AFTER3[i] = 1
  } else {
    conc_burn4$BEFORE_AFTER3[i] = 0 
  }
}


# 5 years before and after
conc_burn4$BEFORE_AFTER5 = 0
for (i in 6:(nrow(conc_burn4)-5)) {
  if(conc_burn4$burned[i] == 1 && 
     conc_burn4$burned[i-1]==0 && 
     conc_burn4$burned[i-2]==0 && 
     conc_burn4$burned[i-3]==0 &&
     conc_burn4$burned[i-4]==0 &&
     conc_burn4$burned[i-5]==0 &&
     conc_burn4$burned[i+1]==0 && 
     conc_burn4$burned[i+2]==0 &&
     conc_burn4$burned[i+3]==0 &&
     conc_burn4$burned[i+4]==0 &&
     conc_burn4$burned[i+5]==0){
    conc_burn4$BEFORE_AFTER3[i] = 1
  } else {
    conc_burn4$BEFORE_AFTER3[i] = 0 
  }
}

# Calculate Average Concentration before and after 

# For 2 years
conc_burn4$Viol.Conc.B2 = NA
conc_burn4$Viol.Conc.A2 = NA
for (i in 3:nrow(conc_burn4)-2) { 
  if(conc_burn4$BEFORE_AFTER2[i] == 1){
    conc_burn4$Viol.Conc.B2[i] =       # Mean violations before     
      mean(conc_burn4$Viol.Conc[i-2]:conc_burn4$Viol.Conc[i-1]) 
    conc_burn4$Viol.Conc.A2[i] =       # Mean violations after
      mean(conc_burn4$Viol.Conc[i+1]:conc_burn4$Viol.Conc[i+2])  
  } #else {
    #conc_burn4$Viol.Conc.B3[i] = NA
  #}
}

# For 3 years
conc_burn4$Viol.Conc.B3 = NA
conc_burn4$Viol.Conc.A3 = NA
for (i in 4:nrow(conc_burn4)-3) { 
  if(conc_burn4$BEFORE_AFTER3[i] == 1){
    conc_burn4$Viol.Conc.B3[i] =       # Mean violations before     
      mean(conc_burn4$Viol.Conc[i-3]:conc_burn4$Viol.Conc[i-1]) 
    conc_burn4$Viol.Conc.A3[i] =       # Mean violations after
      mean(conc_burn4$Viol.Conc[i+1]:conc_burn4$Viol.Conc[i+3])  
  } #else {
    #conc_burn4$Viol.Conc.B3[i] = NA
  #}
}



# For 5 years
conc_burn4$Viol.Conc.B5 = NA
conc_burn4$Viol.Conc.A5 = NA
for (i in 6:nrow(conc_burn4)-5) { 
  if(conc_burn4$BEFORE_AFTER5[i] == 1){
    conc_burn4$Viol.Conc.B5[i] =       # Mean violations before     
      mean(conc_burn4$Viol.Conc[i-5]:conc_burn4$Viol.Conc[i-1]) 
    conc_burn4$Viol.Conc.A5[i] =       # Mean violations after
      mean(conc_burn4$Viol.Conc[i+1]:conc_burn4$Viol.Conc[i+5])  
  } #else {
    #conc_burn4$Viol.Conc.B3[i] = NA
  #}
}
# Average Violations Before burn 3 years




```



# MEAN
```{r}

mean(conc_burn4$Viol.Conc.B2,na.rm=T) # 2.705556
mean(conc_burn4$Viol.Conc.A2,na.rm=T) # 2.116667

mean(conc_burn4$Viol.Conc.B3,na.rm=T) # 0.5555556
mean(conc_burn4$Viol.Conc.A3,na.rm=T) # 3.455556

mean(conc_burn4$Viol.Conc.B5,na.rm=T) # NaN
mean(conc_burn4$Viol.Conc.A5,na.rm=T) # NaN

```


# Box Plots - for 2 years
```{r}

before = as.data.frame(conc_burn4$Viol.Conc.B2)
names(before)[1] = "Viol.Conc"
before = as.data.frame(before[complete.cases(before[,c("Viol.Conc")]),]) 
names(before)[1] = "Viol.Conc"
before$when = "before"

after = as.data.frame(conc_burn4$Viol.Conc.A2)
names(after)[1] = "Viol.Conc"
after = as.data.frame(after[complete.cases(after[,c("Viol.Conc")]),]) 
names(after)[1] = "Viol.Conc"
after$when = "after"

before_after = rbind(before,after)

before_after$when<-factor(before_after$when, levels=c("before", "after"))

boxplot(before_after$Viol.Conc~before_after$when,
        ylab="Mean Violation Concentration")



```


# Box Plots - for 3 years
```{r}

before = as.data.frame(conc_burn4$Viol.Conc.B3)
names(before)[1] = "Viol.Conc"
before = as.data.frame(before[complete.cases(before[,c("Viol.Conc")]),]) 
names(before)[1] = "Viol.Conc"
before$when = "before"

after = as.data.frame(conc_burn4$Viol.Conc.A3)
names(after)[1] = "Viol.Conc"
after = as.data.frame(after[complete.cases(after[,c("Viol.Conc")]),]) 
names(after)[1] = "Viol.Conc"
after$when = "after"

before_after = rbind(before,after)

before_after$when<-factor(before_after$when, levels=c("before", "after"))

boxplot(before_after$Viol.Conc~before_after$when,
        ylab="Mean Violation Concentration")



```



# T test before and after
```{r}

shapiro.test(conc_burn4$Viol.Conc.B3)
shapiro.test(conc_burn4$Viol.Conc.B3)


t.test(conc_burn4$Viol.Conc.B3,conc_burn4$Viol.Conc.A3)
# p-value = 0.09195

t.test(conc_burn4$Viol.Conc.B2,conc_burn4$Viol.Conc.A2)
# p-value = 0.73

wilcox.test(conc_burn4$Viol.Conc.B3,conc_burn4$Viol.Conc.A3)
# p-value = 0.09368

```

# Method 2 - Concentrations
* categorize as periods after burn and periods without burn
* after burn = years 1-3 directly after a year burned  
* if it burns multiple years in row, then extend the period for after burn
* periods without burn have to be at least 3 years post burn, up until year before a burn. 
* For Burn Year including the actual burn year in averages

```{r}

df = conc_burn4[,1:4]

# 3 years after


df$AFTER3 = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$AFTER3[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER3[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER3[i+3] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER3[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 in NO3 for example
# This removes any 1's from AFTER3 that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-3)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+3] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER3[i+3] = 0
  }
}


#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$NOBURN == 1,]$Viol.Conc) # 0.8118841,

# Calculate mean AFTER3
mean(df[df$AFTER3 == 1,]$Viol.Conc) # 2.45729


#*********************************************************************
# Box Plots
df$BURN_NOBURN = ifelse(df$NOBURN == 1,'NOBURN','BURN')

boxplot(df$Viol.Conc~df$BURN_NOBURN,
        ylab="Mean Violation Concentration")


#*********************************************************************
shapiro.test(df$Viol.Conc) # p-value < 2.2e-16


t.test(df$Viol.Conc~df$BURN_NOBURN)
# p-value = 0.003389

wilcox.test(df$Viol.Conc~df$BURN_NOBURN)
# p-value = 0.0002345

```

# Histogram - NO3
```{r}
library(lattice)
library(ggplot2)

# df2 has no NAs, df has the NAs
nrow(df) # 159890
nrow(df2) # 4047

levels(factor(df2$Perc_ViolwTreat))

df2$withT = df2$Perc_ViolwTreat+1
df2$withNoT = df2$Perc_ViolnoTreat+1

#df$Viol.Conc~df$BURN_NOBUR

densityplot(df2$Perc_ViolwTreat,
            ylim=c(0,0.30))
densityplot(df2$Perc_ViolnoTreat,
            ylim=c(0,0.30))


ggplot(data=df2, aes(df2$withT)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Percent in Violation with Treatment")+
  scale_y_log10(breaks= c(10,100,1000,10000))

ggplot(data=df2, aes(df2$withNoT)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Percent in Violation without Treatment")+
  scale_y_log10(breaks= c(10,100,1000,10000))
  

# Count number of zeros

nrow(df2[df2$Perc_ViolwTreat == 0,]) # 3947

nrow(df2[df2$Perc_ViolnoTreat == 0,]) # 3942

# Count Number of Violations > 0
nrow(df2[df2$Perc_ViolwTreat > 0,]) # 100
nrow(df2[df2$Perc_ViolnoTreat > 0,]) # 105



```

#*************************************
#*************************************
# Remove Unneeded objects
```{r}

#rm(burn)
rm(burn2)
rm(burn3)
rm(burn4)
rm(burn5)
#rm(burn6)
rm(sys)
#rm(loc1)
#rm(loc2)
rm(all_avg)
rm(all_single)
gc()

```



#*************************************
#*************************************
# Bootstrapped Means
#*************************************
#*************************************



#*************************************

# Viol - 1-Year After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 1 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}


# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-1)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+1] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+1] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}


# Add BURN_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```


# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))


# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_1y_boot = df3


# 

```


# Plots
```{r}

df = viol_1y_boot

#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247

#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]


ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000),limits=c(1,1000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Un-Burned Catchments")


#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757


```

# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_1y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))


```



# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_1y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_1y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_1y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_1y_boot2 = viol_1y_boot[selectedRows,]

nrow(viol_1y_boot) # 360
nrow(viol_1y_boot2) # 288

# Add on Freq of BURN and NOBURN
viol_1y_boot2 = merge(viol_1y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Using the random sampling of min freq 
```{r}

library(boot)
df = viol_1y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]



# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```


# Boot - BURN
```{r}

library(boot)
df = viol_1y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y1 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_1y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]




d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol


# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)


ranked_NOBURN = ranked
```


# All Boot-BURN
```{r}

library(boot)
df = viol_1y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)


ranked_BURN = ranked
BURNBOX1 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX1
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX1
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```

# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 
plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d[i,'Burn_mean_viol'],i,pch=16,col='red')
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d2[i,'Burn_mean_viol'],i,pch=16,col='red')

}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)
Map_COMIDs = d$COMID

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_1_yr"
d95ci_1a = temp


```


# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}

# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_1yrA = numbers
numbers_1yrA

```


#*************************************

# Viol - 2-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 2 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}


# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-2)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+2] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+2] = 0
  }
}

# Also the first 2 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}

# Add BURn_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```



# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))


# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_2y_boot = df3


# 

```


# Plots
```{r}

df = viol_2y_boot

#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]


ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000),limits=c(1,1000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Un-Burned Catchments")


#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757


```

# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_2y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))


```





# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_2y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_2y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_2y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_2y_boot2 = viol_2y_boot[selectedRows,]

nrow(viol_2y_boot) # 360
nrow(viol_2y_boot2) # 288

# Add on Freq of BURN and NOBURN
viol_2y_boot2 = merge(viol_2y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Using the random sampling of min freq 
```{r}

library(boot)
df = viol_2y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min, replace=T), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_2y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y2 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_2y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

temp = df_Y[df_Y$COMID == 226545,]
test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 


ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)


ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_2y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 


ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)


ranked_BURN = ranked
BURNBOX2 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX2
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX2
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 
plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d[i,'Burn_mean_viol'],i,pch=16,col='red')
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d2[i,'Burn_mean_viol'],i,pch=16,col='red')

}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_2_yr"
d95ci_2a = temp


```

# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```


# Numbers BURN > NOBURN 
```{r}

# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_2yrA = numbers
numbers_2yrA

```


#*************************************
# Viol - 3-Years After
```{r}
library(ggplot2)
df = viol_burn4[,c(1,2,5,6)]

# temp = df[,c('COMID','YEAR','Viol.Rate','BURN_NOBURN')]
# write.csv(temp,'D:/temp/Data/Burn_Violations.csv')


# 3 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-3)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+3] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+3] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}

# Add BURn_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```

# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_3y_boot = df3


# 

```


# Plots
```{r}

df = viol_3y_boot

#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]


ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000),limits=c(1,1000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Un-Burned Catchments")


#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757


```



# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_3y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))


# p-value
m1 = lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn)
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502


```







# Prep Bootstrap

```{r}
library(dplyr)

burn_freq = viol_3y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_3y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_3y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_3y_boot2 = viol_3y_boot[selectedRows,]

nrow(viol_3y_boot) # 360
nrow(viol_3y_boot2) # 288

# Add on Freq of BURN and NOBURN
viol_3y_boot2 = merge(viol_3y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_3y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]



# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_3y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y3 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_3y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

temp = df_Y[df_Y$COMID == 226545,]
test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))

mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 



ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked
```


# All Boot-BURN
```{r}

library(boot)
df = viol_3y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V1)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 
ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)




ranked_BURN = ranked
BURNBOX3 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```



# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX3
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX3
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```

# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 
plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d[i,'Burn_mean_viol'],i,pch=16,col='red')
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
#dev.off()




```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_3_yr"
d95ci_3a = temp


```

# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```


# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}

# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_3yrA = numbers
numbers_3yrA

ID_Larger = as.data.frame(d[d$Burn_Larger == 1,]$COMID)
names(ID_Larger)[1] = 'COMID'
nrow(ID_Larger) # 50

ID_Smaller = as.data.frame(d[d$Burn_smaller == 1,]$COMID)
names(ID_Smaller)[1] = 'COMID'
nrow(ID_Smaller) # 50

ID_Same = as.data.frame(d[d$Burn_same == 1,]$COMID)
names(ID_Same)[1] = 'COMID'
nrow(ID_Same) # 50

```


#**************************************
# Viol - 4-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 4 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-4)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+4] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+4] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}

# Add BURn_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```


# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_4y_boot = df3


# 

```


# Plots
```{r}

df = viol_4y_boot

#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247


#*********************************************************************

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]


ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000),limits=c(1,1000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Un-Burned Catchments")


#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757


```


# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_4y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))


```




# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_4y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_4y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_4y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_4y_boot2 = viol_4y_boot[selectedRows,]

nrow(viol_4y_boot) # 360
nrow(viol_4y_boot2) # 288

# Add on Freq of BURN and NOBURN
viol_4y_boot2 = merge(viol_4y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_4y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_4y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y4 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_4y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

temp = df_Y[df_Y$COMID == 226545,]
test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)


ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_4y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol

# get 95% confidence interval 



ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX4 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```

# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX4
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX4
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 
plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d[i,'Burn_mean_viol'],i,pch=16,col='red')
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  points(d2[i,'Burn_mean_viol'],i,pch=16,col='red')

}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_4_yr"
d95ci_4a = temp


```

# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}

# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_4yrA = numbers
numbers_4yrA

```


#**************************************
# Viol - 5-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 5 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}
for (i in 1:(nrow(df)-5)) {
  if(df$burned[i] == 1){
      df$AFTER[i+5] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-5)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+5] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+5] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+4] = 0
  }
}

# Add BURn_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```


# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_5y_boot = df3


# 

```


# Plots
```{r}

df = viol_5y_boot

#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247


#*********************************************************************

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]


ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000),limits=c(1,1000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  #scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  scale_y_continuous(breaks= seq(0, 160, by = 20),limits=c(0,160))+
  ggtitle( "Un-Burned Catchments")


#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757


```

# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_5y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))


```


# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_5y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_5y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_5y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_5y_boot2 = viol_5y_boot[selectedRows,]

nrow(viol_5y_boot) # 2446
nrow(viol_5y_boot2) # 766

# Add on Freq of BURN and NOBURN
viol_5y_boot2 = merge(viol_5y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_5y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')



```




# Boot - BURN
```{r}

library(boot)
df = viol_5y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y5 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')


```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_5y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

temp = df_Y[df_Y$COMID == 226545,]
test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_5y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX5 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX5
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX5
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  points(d[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2,cex.axis=.5)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=2)
}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_5_yr"
d95ci_5a = temp


```

# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}

# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_5yrA = numbers
numbers_5yrA

```

#**************************************


# Viol - 6-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 6 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}
for (i in 1:(nrow(df)-5)) {
  if(df$burned[i] == 1){
      df$AFTER[i+5] = 1
  }
}
for (i in 1:(nrow(df)-6)) {
  if(df$burned[i] == 1){
      df$AFTER[i+6] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-6)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+6] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+6] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+4] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+5] = 0
  }
}

# Add BURN_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```

# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_6y_boot = df3


# 

```

# Plots
```{r}

df = viol_6y_boot


#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]

ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits=c(1,10000))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  ggtitle( "Un-Burned Catchments")

#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757

```



# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_6y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))

# p-value
m1 = lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn)
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502



```



# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_6y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_6y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_6y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_6y_boot2 = viol_6y_boot[selectedRows,]

nrow(viol_6y_boot) # 2446
nrow(viol_6y_boot2) # 766

# Add on Freq of BURN and NOBURN
viol_6y_boot2 = merge(viol_6y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_6y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_6y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y6 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')



```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_6y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

#temp = df_Y[df_Y$COMID == 226545,]
#test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_6y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX6 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX6
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX6
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  points(d[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2,cex.axis=.5)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=2)
}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)


# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_6_yr"
d95ci_6a = temp


```


# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}


# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_6yrA = numbers
numbers_6yrA

ID_Larger = as.data.frame(d[d$Burn_Larger == 1,]$COMID)
names(ID_Larger)[1] = 'COMID'
nrow(ID_Larger) # 50

ID_Smaller = as.data.frame(d[d$Burn_smaller == 1,]$COMID)
names(ID_Smaller)[1] = 'COMID'
nrow(ID_Smaller) # 50

ID_Same = as.data.frame(d[d$Burn_same == 1,]$COMID)
names(ID_Same)[1] = 'COMID'
nrow(ID_Same) # 50

```

#**************************************

# Viol - 7-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

#  years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}
for (i in 1:(nrow(df)-5)) {
  if(df$burned[i] == 1){
      df$AFTER[i+5] = 1
  }
}
for (i in 1:(nrow(df)-6)) {
  if(df$burned[i] == 1){
      df$AFTER[i+6] = 1
  }
}
for (i in 1:(nrow(df)-7)) {
  if(df$burned[i] == 1){
      df$AFTER[i+7] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-7)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+7] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+7] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+4] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+5] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+6] = 0
  }
}

# Add BURN_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```

# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_7y_boot = df3


# 

```

# Plots
```{r}

df = viol_7y_boot


#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]

ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits=c(1,10000))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  ggtitle( "Un-Burned Catchments")

#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757

```



# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_7y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))

# p-value
m1 = lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn)
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502



```



# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_7y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_7y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_7y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_7y_boot2 = viol_7y_boot[selectedRows,]

nrow(viol_7y_boot) # 2446
nrow(viol_7y_boot2) # 766

# Add on Freq of BURN and NOBURN
viol_7y_boot2 = merge(viol_7y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_7y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_7y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y7 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')



```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_7y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

#temp = df_Y[df_Y$COMID == 226545,]
#test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_7y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX7 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX7
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX7
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  points(d[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2,cex.axis=.5)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=2)
}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)


# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_7_yr"
d95ci_7a = temp


```


# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}


# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_7yrA = numbers
numbers_7yrA

ID_Larger = as.data.frame(d[d$Burn_Larger == 1,]$COMID)
names(ID_Larger)[1] = 'COMID'
nrow(ID_Larger) # 50

ID_Smaller = as.data.frame(d[d$Burn_smaller == 1,]$COMID)
names(ID_Smaller)[1] = 'COMID'
nrow(ID_Smaller) # 50

ID_Same = as.data.frame(d[d$Burn_same == 1,]$COMID)
names(ID_Same)[1] = 'COMID'
nrow(ID_Same) # 50

```

#**************************************

# Viol - 8-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 8 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}
for (i in 1:(nrow(df)-5)) {
  if(df$burned[i] == 1){
      df$AFTER[i+5] = 1
  }
}
for (i in 1:(nrow(df)-6)) {
  if(df$burned[i] == 1){
      df$AFTER[i+6] = 1
  }
}
for (i in 1:(nrow(df)-7)) {
  if(df$burned[i] == 1){
      df$AFTER[i+7] = 1
  }
}
for (i in 1:(nrow(df)-8)) {
  if(df$burned[i] == 1){
      df$AFTER[i+8] = 1
  }
}

# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-8)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+7] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+7] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+4] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+5] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+6] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+7] = 0
  }
}

# Add BURN_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```

# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_8y_boot = df3


# 

```

# Plots
```{r}

df = viol_8y_boot


#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]

ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits=c(1,10000))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  ggtitle( "Un-Burned Catchments")

#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757

```



# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_8y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))

# p-value
m1 = lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn)
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502



```



# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_8y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_8y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_8y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_8y_boot2 = viol_8y_boot[selectedRows,]

nrow(viol_8y_boot) # 2446
nrow(viol_8y_boot2) # 766

# Add on Freq of BURN and NOBURN
viol_8y_boot2 = merge(viol_8y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_8y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_8y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y8 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')



```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_8y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

#temp = df_Y[df_Y$COMID == 226545,]
#test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_8y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX8 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX8
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX8
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  points(d[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2,cex.axis=.5)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=2)
}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)


# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_8_yr"
d95ci_8a = temp


```


# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}


# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_8yrA = numbers
numbers_8yrA

ID_Larger = as.data.frame(d[d$Burn_Larger == 1,]$COMID)
names(ID_Larger)[1] = 'COMID'
nrow(ID_Larger) # 50

ID_Smaller = as.data.frame(d[d$Burn_smaller == 1,]$COMID)
names(ID_Smaller)[1] = 'COMID'
nrow(ID_Smaller) # 50

ID_Same = as.data.frame(d[d$Burn_same == 1,]$COMID)
names(ID_Same)[1] = 'COMID'
nrow(ID_Same) # 50

```


#**************************************

# Viol - 9-Years After
```{r}

df = viol_burn4[,c(1,2,5,6)]

# 9 years after

df$AFTER = 0
for (i in 1:(nrow(df)-1)) {
  if(df$burned[i] == 1){
      df$AFTER[i+1] = 1
  }
}
for (i in 1:(nrow(df)-2)) {
  if(df$burned[i] == 1){
      df$AFTER[i+2] = 1
  }
}
for (i in 1:(nrow(df)-3)) {
  if(df$burned[i] == 1){
      df$AFTER[i+3] = 1
  }
}
for (i in 1:(nrow(df)-4)) {
  if(df$burned[i] == 1){
      df$AFTER[i+4] = 1
  }
}
for (i in 1:(nrow(df)-5)) {
  if(df$burned[i] == 1){
      df$AFTER[i+5] = 1
  }
}
for (i in 1:(nrow(df)-6)) {
  if(df$burned[i] == 1){
      df$AFTER[i+6] = 1
  }
}
for (i in 1:(nrow(df)-7)) {
  if(df$burned[i] == 1){
      df$AFTER[i+7] = 1
  }
}
for (i in 1:(nrow(df)-8)) {
  if(df$burned[i] == 1){
      df$AFTER[i+8] = 1
  }
}
for (i in 1:(nrow(df)-9)) {
  if(df$burned[i] == 1){
      df$AFTER[i+9] = 1
  }
}
# Years burned after and year of burn
df$BURNALL = 0
for (i in 1:(nrow(df))) {
  if(df$burned[i] == 1){
      df$BURNALL[i] = 1 }
  if(df$AFTER[i] == 1){
      df$BURNALL[i] = 1
  }
}


# Years No Burn 
df$NOBURN = 0
for (i in 1:(nrow(df))) {
  if(df$BURNALL[i] == 0){
      df$NOBURN[i] = 1
  }
}


# Clean Up any burn after when switching from one site to another
# See COMID 5771837 or 13260237 in NO3 for example
# This removes any 1's from AFTER that carry over into next COMID since 2015+3 years is 2018 and this data only goes to 2017
# Only need to do this for 2015 and not 2016/17 bc no burn data for those years
for (i in 1:(nrow(df)-8)) {
  if(df$YEAR[i] == 2015 &
     df$burned[i] == 1 &
     df$burned[i+7] == 0){  # if 1994 for next site is burned, then don't change 
      df$AFTER[i+7] = 0
  }
}

# Also the first 3 years can't be listed as no burn since don't know what was happening prior to first year (i.e. prior to 1994 for NO3)
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+1] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+2] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+3] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+4] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+5] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+6] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+7] = 0
  }
}
for (i in 1:(nrow(df))) {
  if(df$YEAR[i] == YYYY){
      df$NOBURN[i+8] = 0
  }
}

# Add BURN_NOBURN Field
df$BURN_NOBURN = 'NA'
for (i in 1:nrow(df)){
if(df$NOBURN[i] == 1){
    df$BURN_NOBURN[i] = 'NOBURN'
} else if(df$BURNALL[i] == 1){
    df$BURN_NOBURN[i] = 'BURN' 
} else { df$BURN_NOBURN[i] = 'NA'
}
}

```

# ***If remove year burned
* If run this code then results will not include burn year (burn year will be NA)
* but if skip this code then results will include burn year as BURN
```{r}

df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

# Put 1s next to the year burned if no year burned in prior year
df2$NOBURNYR  = 0
for (i in 2:(nrow(df2))) {
  if(df2$BURN_NOBURN[i] == 'BURN' &
     df2$BURN_NOBURN[i-1] == 'NOBURN'
     | df2$BURN_NOBURN[i-1] == 'NA'
     ){
    df2$NOBURNYR[i] = 1
  }
}

# Convert these year burned with the 1s to NAs
for (i in 2:(nrow(df2))) {
  if(df2$NOBURNYR[i] == 1){
    df2$BURN_NOBURN[i] = 'NA'
  }
}

# Removing NAs
df3 = subset(df2, BURN_NOBURN != "NA")
df3$BURN_NOBURN<-factor(df3$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df3,
        ylab="Mean Violation Frequency")

#*********************************************************************
shapiro.test(df3$Viol.Rate) # p-value < 2.2e-16


t.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df3$Viol.Rate~df3$BURN_NOBURN)
# p-value = 0.0001757

viol_9y_boot = df3


# 

```

# Plots
```{r}

df = viol_9y_boot


#*********************************************************************
# MEAN number of violations per year

# Calculate mean NOBURN
mean(df[df$BURN_NOBURN == 'NOBURN',]$Viol.Rate) # 0.05932203,

# Calculate mean AFTER
mean(df[df$BURN_NOBURN == 'BURN',]$Viol.Rate) # 0.3608247
#*********************************************************************


df2 = subset(df, BURN_NOBURN != "NA")
df2$BURN_NOBURN<-factor(df2$BURN_NOBURN, levels=c("NOBURN", "BURN"))

boxplot(Viol.Rate~BURN_NOBURN, data = df2,
        ylab="Mean Violation Frequency")

BURN_hist = df2[df2$BURN_NOBURN=="BURN",]
NOBURN_hist = df2[df2$BURN_NOBURN=="NOBURN",]

ggplot(data=BURN_hist, aes(BURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits=c(1,10000))+
  ggtitle( "Burned Catchments")

ggplot(data=NOBURN_hist, aes(NOBURN_hist$Viol.Rate)) + 
  geom_histogram(binwidth = 1, col = "black")+
  labs(x="Frequency of Violations")+
  scale_y_log10(breaks= c(10,100,1000,10000),limits = c(1,10000))+
  ggtitle( "Un-Burned Catchments")

#*********************************************************************
shapiro.test(df2$Viol.Rate) # p-value < 2.2e-16


t.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001044

wilcox.test(df2$Viol.Rate~df2$BURN_NOBURN)
# p-value = 0.0001757

```



# %Burn vs. Viol
* take average % burn for years labeled as burn years and avg viols
```{r}

burn_plot = merge(viol_9y_boot,
                  viol_burn3[,c('COMID','YEAR','perc_burn')],
                  by=c('COMID','YEAR'),all.x=T)

# Convert perc_burn NAs to 0
burn_plot$perc_burn[is.na(burn_plot$perc_burn)] <- 0


# aggregate by COMID 
burn_plot_Final1 = burn_plot %>% 
  dplyr::group_by(COMID) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))



# Add Row Sequence
burn_plot$burnrow = seq(1,nrow(burn_plot))

# ADD SEQUENCE for each burn
burn_plot$burnseq  = 0
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$burned[i] ==1){ 
    burn_plot$burnseq[i] = burn_plot$burnrow[i]
  }
}

# Assign same row number for same burn year group/window
burn_plot$burnseq2 = burn_plot$burnseq
for (i in 2:(nrow(burn_plot))) {
  if(burn_plot$burnseq[i] != 0) x = burn_plot$burnseq[i]
  if(burn_plot$burnseq[i] == 0) burn_plot$burnseq2[i] = x
}

# Assign NOBURN to burnseq2 so this will also be a category for 0 perc burn
for (i in 1:(nrow(burn_plot))) {
  if(burn_plot$BURN_NOBURN[i] == 'NOBURN'){
    burn_plot$burnseq2[i] =  'NOBURN'
  }
}

# remove NAs
burn_plot2 = burn_plot
burn_plot2 = burn_plot2[complete.cases(burn_plot2[,c("burnseq2")]),] 


# aggregate by COMID & burnseq2
burn_plot_Final2 = burn_plot2 %>% 
  dplyr::group_by(COMID,burnseq2) %>% 
  summarize(mean_perc_burn = mean(perc_burn,na.rm=T),
            mean_viol_freq = mean(Viol.Rate,na.rm=T))


plot(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final2$mean_viol_freq ~ burn_plot_Final2$mean_perc_burn))

plot(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn,
     xlab="Percent Burned", ylab="Violations per PWS per Catchment")
abline(lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn))

# p-value
m1 = lm(burn_plot_Final1$mean_viol_freq ~ burn_plot_Final1$mean_perc_burn)
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502



```



# Prep Bootstrap
```{r}
library(dplyr)

burn_freq = viol_9y_boot %>% 
  dplyr::group_by(COMID,BURN_NOBURN) %>% 
  summarize(freq = n())

# Remove non Duplicates * want to have sites that have both burn and no burn years
nrow(as.data.frame(unique(viol_9y_boot$COMID))) #  15
nrow(as.data.frame(unique(burn_freq$COMID))) #  15

allDup <- function (value) {duplicated(value) | duplicated(value, fromLast = TRUE) } 
burn_freq2 = burn_freq[allDup(burn_freq$COMID),]

nrow(as.data.frame(unique(burn_freq2$COMID))) #   12

selectedRows  = (viol_9y_boot$COMID %in% burn_freq2$COMID) # rows not matching
viol_9y_boot2 = viol_9y_boot[selectedRows,]

nrow(viol_9y_boot) # 2446
nrow(viol_9y_boot2) # 766

# Add on Freq of BURN and NOBURN
viol_9y_boot2 = merge(viol_9y_boot2,burn_freq2,by=c('COMID','BURN_NOBURN'),all.x=T)

# melt
mlt = burn_freq2 %>% group_by(COMID) %>% summarize(BURN = freq[1],
                                                  NOBURN = freq[2])
mlt = as.data.frame(mlt)

for (i in 1:nrow(mlt)){
  mlt$MIN[i] = min(mlt[i,2:3])
}

```

# Boot - NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_9y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_N[df_N$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time

# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
NO_BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
NO_BURN_ALL = merge(NO_BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(NO_BURN_ALL)[which(colnames(NO_BURN_ALL)=="ID_lst")] = "COMID"

names(NO_BURN_ALL) = c('COMID','NoBurn_mean_viol',
                    'NoBurn_median_viol','NoBurn_ci_L','NoBurn_ci_U')

```




# Boot - BURN
```{r}

library(boot)
df = viol_9y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

# Bootstrap
fire_list = list()
start_time <- Sys.time()
for (i in 1:nrow(mlt)){
  ID = mlt$COMID[i]
  min = mlt$MIN[i]
  d = df_Y[df_Y$COMID == ID,]
  #d = d[sample(nrow(d), min), ] # randomly subsample min freq amount
  fire_list[[i]] <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)
}
end_time <- Sys.time(); end_time - start_time


# extract dataframe of 1000 means 
reps = list()
for (i in 1:nrow(mlt)){
  reps[[i]] = as.data.frame(fire_list[[i]]$t)
}

#reps = as.data.frame(fire_list[[i]]$t)
ranked = list()
for (i in 1:nrow(mlt)){
  ranked[[i]] = as.data.frame(sort(reps[[i]]$V1,decreasing=F))
}

#ranked = as.data.frame(sort(reps$V1,decreasing=F))

# extract mean and median 
ID_lst = c()
mean_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  mean_viol[i] = mean(reps[[i]]$V1)
}
mean_all = as.data.frame(cbind(ID_lst,mean_viol))

ID_lst = c()
median_viol = c()
for (i in 1:nrow(mlt)){
  ID_lst[i] = mlt$COMID[i]
  median_viol[i] = median(reps[[i]]$V1)
}
median_all = as.data.frame(cbind(ID_lst,median_viol))


# get 95% confidence interval 
#boot.ci(fire_list[[1]], conf=0.95, type="bca")

# ci = list()
# ci_L = c()
# ci_U = c()
# for (i in 1:nrow(mlt)){
#   tryCatch({ 
#     ci[[i]] = boot.ci(fire_list[[i]], conf=0.95, type="bca")
#     ci_L[i] = ci[[i]]$bca[4]
#     ci_U[i] = ci[[i]]$bca[5]
#   }, error=function(e) {cat("ERROR :",conditionMessage(e), "\n")})
# }


# get 95% confidence interval - Based on Ranking
# And Get the different quantiles to compare
ID_lst = c()
ci_L = c()
ci_U = c()
for (i in 1:nrow(mlt)){
    ID_lst[i] = mlt$COMID[i]
    ci_L[i] = ranked[[i]][50,]
    ci_U[i] = ranked[[i]][950,]
}
ci_all = as.data.frame(cbind(ID_lst,ci_L,ci_U))

# Merge All Data
BURN_ALL = merge(mean_all,median_all,by='ID_lst',all.x=T)
BURN_ALL = merge(BURN_ALL,ci_all,by='ID_lst',all.x=T)

names(BURN_ALL)[which(colnames(BURN_ALL)=="ID_lst")] = "COMID"

names(BURN_ALL) = c('COMID','Burn_mean_viol',
                    'Burn_median_viol','Burn_ci_L','Burn_ci_U')

# Save DF
BURN_DF_Y9 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')



```

#**
# All Boot-NOBURN
* Currently not using the random sampling of min freq 
```{r}

library(boot)
df = viol_9y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]

#temp = df_Y[df_Y$COMID == 226545,]
#test = boot(data= temp['Viol.Rate'], statistic= meanfun, R=1000)



d = df_N
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)

# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
NO_BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                         NoBurn_mean_viol = mean_all,
                         NoBurn_median_viol = median_all,
                         NoBurn_ci_L = ci_L,
                         NoBurn_ci_U = ci_U)



ranked_NOBURN = ranked

```


# All Boot-BURN
```{r}

library(boot)
df = viol_9y_boot2
df = df[,c('COMID','BURN_NOBURN','YEAR','Viol.Rate','freq')]

# Merge on Min Value
df = merge(df,mlt[,c('COMID','MIN')],by='COMID',all.x=T) 

meanfun <- function(data, i){
  d <- data[i, ]
  return(mean(d))   
}


# Separate BURN and NOBURN
df_Y = df[df$BURN_NOBURN == 'BURN',]
df_N = df[df$BURN_NOBURN == 'NOBURN',]


d = df_Y
fire_list <- boot(data= d['Viol.Rate'], statistic= meanfun, R=1000)


# extract dataframe of 1000 means 

reps = as.data.frame(fire_list$t)


ranked = as.data.frame(sort(reps$V1,decreasing=F))


mean_viol = mean(reps$V)
mean_all = mean_viol


median_viol = median(reps$V1)
median_all = median_viol



# get 95% confidence interval - Based on Ranking

ci_L = ranked[50,]
ci_U = ranked[950,]


# Merge All Data
BURN_ALL_ONE = data.frame(COMID = "ALL_SITES",
                      Burn_mean_viol = mean_all,
                      Burn_median_viol = median_all,
                      Burn_ci_L = ci_L,
                      Burn_ci_U = ci_U)



ranked_BURN = ranked
BURNBOX9 = merge(NO_BURN_ALL,BURN_ALL,by='COMID')

```


# MEAN & Boxplots
```{r}
dev.off()

library(reshape)
BURNBOX_ = BURNBOX9
BURNTEMP2 <- melt(BURNBOX_, id.vars = "COMID")
BURNTEMP3 = BURNTEMP2[BURNTEMP2$variable == 'NoBurn_mean_viol' |
                        BURNTEMP2$variable == 'Burn_mean_viol' ,]

temp = BURNTEMP[,c('COMID','NoBurn_mean_viol','Burn_mean_viol')]
temp$DIFF = temp$Burn_mean_viol - temp$NoBurn_mean_viol
mean(temp$DIFF)


# MEAN FOR ALL SITES COMBINED
NO_BURN_ALL_ONE$NoBurn_mean_viol # 0.05957627
BURN_ALL_ONE$Burn_mean_viol      # 0.4454834


boxplot(BURNBOX_$NoBurn_mean_viol, BURNBOX_$Burn_mean_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Mean Annual Violations per PWS per Catchment")

mean(NO_BURN_ALL$NoBurn_mean_viol) # 0.8790477
mean(BURN_ALL$Burn_mean_viol) # 0.7460528

t.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)
wilcox.test(NO_BURN_ALL$NoBurn_mean_viol, BURN_ALL$Burn_mean_viol, paired = T)


t.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)
wilcox.test(BURNTEMP3$value~ BURNTEMP3$variable, paired = T)


```

# Median Box Plots
```{r}

BURNBOX_ = BURNBOX9
boxplot(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol,
        names=c("Pre-Burn","Post-Burn"),
        ylab="Median Annual Violations per PWS per Catchment")

t.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)
wilcox.test(BURNBOX_$NoBurn_median_viol, BURNBOX_$Burn_median_viol, paired = T)

```


# Other Plots
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)

# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)

# Just SEPARATE COMIDS
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt)),labels=mlt$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt)) {
  points(d[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
}

#dev.off()

# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2,cex.axis=.5)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  points(d2[i,'Burn_mean_viol'],i,pch=2,col='red')
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=2)
}
#dev.off()


```

# Other Plots: Both 95% CI 
```{r}

# Merge
d = merge(NO_BURN_ALL, BURN_ALL, by='COMID',all.x=T)
d$COMID = as.factor(d$COMID)


# Add on COMBO data
d_combo = cbind(NO_BURN_ALL_ONE,subset(BURN_ALL_ONE, select=-c(COMID)))
d2 = rbind(d_combo,d)
mlt$COMID = as.factor(mlt$COMID)
mlt_combo = data.frame(COMID = 'ALL_SITES', BURN=as.integer(1),
                       NOBURN=as.integer(1),MIN=as.integer(1))
mlt2 = rbind(mlt_combo,mlt)


# FOR COMIDS AND ALL SITES AS ONE
dev.off()
par(mar=c(4.1,6.3,4.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d2[,2:9]))),c(1,nrow(mlt2)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt2)),labels=mlt2$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt2)) {
  lines(d2[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d2[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}
#dev.off()

# Extract All Sites 
temp = d2[1,]
temp$COMID = as.character(temp$COMID)
temp[1,1] = "ALL_SITES_9_yr"
d95ci_9a = temp


```


# Random Plot
* Used to plot just a subsample of all sites, if the number of sites is too large to display (i.e. > 20)
```{r}
# FOR COMIDS AND ALL SITES AS ONE

N = ifelse(nrow(d2)<20,nrow(d2),20)

d3 = d2[sample(nrow(d2), N), ]
d3 = d3[order(d3$COMID),]

selectedRows  = (mlt2$COMID %in% d3$COMID) # rows not matching
mlt3 = mlt2[selectedRows,]

mlt3 = mlt3[order(mlt3$COMID),]

dev.off()
par(mar=c(4,6.3,1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(d3[,2:9]))),c(1,nrow(mlt3)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(mlt3)),labels=mlt3$COMID,las=2)
mtext(side=2,text= 'Catchments',line=5.4)
mtext(side=1,text= "Mean Annual Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(mlt3)) {
  lines(d3[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(d3[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
  #points(d3[i,'Burn_mean_viol'],i,pch=2,col='red',lwd=2)
}
```

# DIFF in 95% CI
*Randomly sample full dataset with replacement and calculate the diff between mean burn and mean no burn.  If the 95% CI for the diff !=0 then burn and no burn are diff.  
```{r}

ranked_all = cbind(ranked_NOBURN,ranked_BURN)
names(ranked_all) = c("NOBURN","BURN")

ranked_all$DIFF = ranked_all$BURN - ranked_all$NOBURN


ranked_diff = ranked_all$DIFF

ranked_diff = sort(ranked_diff, decreasing = FALSE)

mean_diff = mean(ranked_diff) # 0.3872418

ci_L = ranked_diff[50]
ci_U = ranked_diff[950]

# Check if sig diff from 0 (!=0)

ifelse(abs(mean_diff)-(ci_U-mean_diff)>0, 'SIGNIFICANT','NOT SIGNIFICANT')


```

# Numbers BURN > NOBURN 
```{r}


# number of sites
nrow(d) #  12
d$Burn_Larger = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U >0,1,0)
d$Burn_smaller = ifelse(d$NoBurn_ci_L- d$Burn_mean_viol >0,1,0)
d$Burn_same = ifelse(d$Burn_mean_viol - d$NoBurn_ci_U <=0 &
                     d$Burn_mean_viol - d$NoBurn_ci_L >=0,1,0)

numbers = data.frame(Number_Sites = nrow(d),
                     Num_Burn_Larger = sum(d$Burn_Larger),
                     Num_Burn_Smaller = sum(d$Burn_smaller),
                     Num_Burn_Same = sum(d$Burn_same))


numbers$Pct_Burn_Larger =  100*numbers$Num_Burn_Larger/numbers$Number_Sites
numbers$Pct_Burn_Smaller =  100*numbers$Num_Burn_Smaller/numbers$Number_Sites
numbers$Pct_Burn_Same =  100*numbers$Num_Burn_Same/numbers$Number_Sites

numbers$Pct_Burn_Larger = round(numbers$Pct_Burn_Larger,1)
numbers$Pct_Burn_Smaller = round(numbers$Pct_Burn_Smaller,1)
numbers$Pct_Burn_Same = round(numbers$Pct_Burn_Same,1)

numbers_9yrA = numbers
numbers_9yrA

ID_Larger = as.data.frame(d[d$Burn_Larger == 1,]$COMID)
names(ID_Larger)[1] = 'COMID'
nrow(ID_Larger) # 50

ID_Smaller = as.data.frame(d[d$Burn_smaller == 1,]$COMID)
names(ID_Smaller)[1] = 'COMID'
nrow(ID_Smaller) # 50

ID_Same = as.data.frame(d[d$Burn_same == 1,]$COMID)
names(ID_Same)[1] = 'COMID'
nrow(ID_Same) # 50

```



#**************************************

# Control Compare
* Make box plots or calculate average violations before and after burn (3 or 5 years) and compare with random control catchments with violations but without burn.  
* Randomly taking a two sets of 3 years in the control catchments to calculate the average "Pre" and "Post" burn values to calculat eht difference between the two groups. 

```{r}

dev.off()
set.seed(12)
# Calculate Mean Burn - Mean No Burn
BURN_DF_Y1$DIFF_BURN= BURN_DF_Y1$Burn_mean_viol - BURN_DF_Y1$NoBurn_mean_viol
BURN_DF_Y2$DIFF_BURN= BURN_DF_Y2$Burn_mean_viol - BURN_DF_Y2$NoBurn_mean_viol
BURN_DF_Y3$DIFF_BURN= BURN_DF_Y3$Burn_mean_viol - BURN_DF_Y3$NoBurn_mean_viol
BURN_DF_Y4$DIFF_BURN= BURN_DF_Y4$Burn_mean_viol - BURN_DF_Y4$NoBurn_mean_viol
BURN_DF_Y5$DIFF_BURN= BURN_DF_Y5$Burn_mean_viol - BURN_DF_Y5$NoBurn_mean_viol 

#()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
# Select BURN_DF
BURN_DF = BURN_DF_Y3

#()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()

# Find Catchments with Violations, but Without Wildfires
selectedRows  = (!cat_viol_yr_sw$COMID %in% BURN_DF_Y1$COMID) #  not matching
CONTRL = cat_viol_yr_sw[selectedRows,]

#Give zero for missing years
# Fill out zeros for years there are no violations in each Catchment
# Add Zero Violations for the years that a county has no violation
temp = CONTRL
vals <- expand.grid(COMID = unique(temp$COMID),
                    YEAR = unique(temp$YEAR))
CONTRL = merge(vals,temp,all = TRUE)
CONTRL[is.na(CONTRL)] <- 0 # convert NA's to zero

# randomly sample to get 2 groups for each control COMID
IDS = unique(as.data.frame(CONTRL$COMID)); names(IDS) = 'COMID'
CONTRL_table1 = data.frame(COMID = NA, mean_viol1 = NA)
CONTRL_table2 = data.frame(COMID = NA, mean_viol2 = NA)
for (i in 1:nrow(IDS)){
  ID = IDS$COMID[i]
  d = CONTRL[CONTRL$COMID == ID,]
  dd = d[sample(nrow(d), 6), ] # randomly subsample 
  dd = dd[order(dd$YEAR),] # order base on YEARS
  d1 = dd[1:3,]# select the first group 
  d2 = dd[4:6,]; d2$group = 2 # select out second group
  dd1 = d1 %>% group_by(COMID) %>% summarize(mean_viol = mean(Viol.Rate)) 
  dd2 = d2 %>% group_by(COMID) %>% summarize(mean_viol = mean(Viol.Rate)) 
  d3 =  rbind(dd1,dd2)
  CONTRL_table1[i,] <- dd1
  CONTRL_table2[i,] <- dd2
}

CONTRL_table = merge(CONTRL_table1,CONTRL_table2,by='COMID')
nrow(CONTRL_table) # 63
CONTRL_table$DIFF_CNTRL = CONTRL_table$mean_viol2 - CONTRL_table$mean_viol1

#************************************************************
# BOXPLOT
boxplot(CONTRL_table$DIFF_CNTRL,BURN_DF$DIFF_BURN, 
        names=c("Control Diff","Burn Diff"),
        ylab="Mean Difference in Violation Rate")


t.test(BURN_DF$DIFF_BURN, CONTRL_table$DIFF_CNTRL)
# p-value = 0.1029

wilcox.test(BURN_DF$DIFF_BURN, CONTRL_table$DIFF_CNTRL)
# p-value = 0.05845



```

# Median Control Compare
```{r}

dev.off()
set.seed(12)
# Calculate Mean Burn - Mean No Burn
BURN_DF_Y1$DIFF_BURN_m= BURN_DF_Y1$Burn_median_viol - BURN_DF_Y1$NoBurn_median_viol
BURN_DF_Y2$DIFF_BURN_m= BURN_DF_Y2$Burn_median_viol - BURN_DF_Y2$NoBurn_median_viol
BURN_DF_Y3$DIFF_BURN_m= BURN_DF_Y3$Burn_median_viol - BURN_DF_Y3$NoBurn_median_viol
BURN_DF_Y4$DIFF_BURN_m= BURN_DF_Y4$Burn_median_viol - BURN_DF_Y4$NoBurn_median_viol
BURN_DF_Y5$DIFF_BURN_m= BURN_DF_Y5$Burn_median_viol - BURN_DF_Y5$NoBurn_median_viol 

#()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
# Select BURN_DF
BURN_DF = BURN_DF_Y3

#()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()

# Find Catchments with Violations, but Without Wildfires
selectedRows  = (!cat_viol_yr_sw$COMID %in% BURN_DF_Y1$COMID) #  not matching
CONTRL = cat_viol_yr_sw[selectedRows,]

#Give zero for missing years
# Fill out zeros for years there are no violations in each Catchment
# Add Zero Violations for the years that a county has no violation
temp = CONTRL
vals <- expand.grid(COMID = unique(temp$COMID),
                    YEAR = unique(temp$YEAR))
CONTRL = merge(vals,temp,all = TRUE)
CONTRL[is.na(CONTRL)] <- 0 # convert NA's to zero

# randomly sample to get 2 groups for each control COMID
IDS = unique(as.data.frame(CONTRL$COMID)); names(IDS) = 'COMID'
CONTRL_table1 = data.frame(COMID = NA, median_viol1 = NA)
CONTRL_table2 = data.frame(COMID = NA, median_viol2 = NA)
for (i in 1:nrow(IDS)){
  ID = IDS$COMID[i]
  d = CONTRL[CONTRL$COMID == ID,]
  dd = d[sample(nrow(d), 6), ] # randomly subsample 
  dd = dd[order(dd$YEAR),] # order base on YEARS
  d1 = dd[1:3,]# select the first group 
  d2 = dd[4:6,]; d2$group = 2 # select out second group
  dd1 = d1 %>% group_by(COMID) %>% summarize(median_viol = median(Viol.Rate)) 
  dd2 = d2 %>% group_by(COMID) %>% summarize(median_viol = median(Viol.Rate)) 
  d3 =  rbind(dd1,dd2)
  CONTRL_table1[i,] <- dd1
  CONTRL_table2[i,] <- dd2
}

CONTRL_table = merge(CONTRL_table1,CONTRL_table2,by='COMID')
nrow(CONTRL_table) # 63
CONTRL_table$DIFF_CNTRL = CONTRL_table$median_viol2 - CONTRL_table$median_viol1

#************************************************************
# BOXPLOT
boxplot(CONTRL_table$DIFF_CNTRL, BURN_DF$DIFF_BURN_m, 
        names=c("Control Diff","Burn Diff"),
        ylab="Median Difference in Violation Rate")

mean(BURN_DF$DIFF_BURN_m) # -0.2207427
mean(CONTRL_table$DIFF_CNTRL) # -0.1940994

t.test(BURN_DF$DIFF_BURN_m, CONTRL_table$DIFF_CNTRL)
# p-value = 0.1029

wilcox.test(BURN_DF$DIFF_BURN_m, CONTRL_table$DIFF_CNTRL)
# p-value = 0.05845



```

#**************************************

# Compiled Tables
```{r}

numbers_all1 = data.frame(Window = c('1yrA','2yrA','3yrA','4yrA','5yrA','6yrA','7yrA','8yrA','9yrA'))
numbers_all2 = rbind(numbers_1yrA,numbers_2yrA,numbers_3yrA,
                     numbers_4yrA,numbers_5yrA,numbers_6yrA,
                     numbers_7yrA,numbers_8yrA,numbers_9yrA)

numbers_all = cbind(numbers_all1,numbers_all2)

```

# All Site Other Plots
* This plot is based on the 95% CI for for all pre-and post years for all sites mixed together. 
```{r}
dev.off()
# Make a blank row
blankrw = d95ci_1a
blankrw[1,] = NA
All_95CI = rbind(d95ci_9a,d95ci_8a,d95ci_7a,d95ci_6a,d95ci_5a,d95ci_4a,
                 d95ci_3a,d95ci_2a,d95ci_1a,blankrw,blankrw)

# Change COMID names 
All_95CI$COMID = c('9 year window','8 year window','7 year window',
                   '6 year window','5 year window','4 year window',
                   '3 year window','2 year window','1 year window',NA,NA)

# FOR COMIDS AND ALL SITES AS ONE

par(mar=c(4.1,10.3,1.1,2.2)+ 0.1) # par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 

plot(c(0,ceiling(max(All_95CI[,2:9],na.rm=T))),c(1,nrow(All_95CI)),type='n',ann=F,yaxt='n')
axis(2,at=seq(1:nrow(All_95CI)),labels=All_95CI$COMID,las=2)
mtext(side=2,text= 'Window',line=8.4)
mtext(side=1,text= "Mean Violations per PWS per Catchment", line = 2)
for (i in 1:nrow(All_95CI)) {
  lines(All_95CI[i,c('NoBurn_ci_L','NoBurn_ci_U')],rep(i,2),col='blue',lwd=5)
  lines(All_95CI[i,c('Burn_ci_L','Burn_ci_U')],rep(i,2),col='red',lwd=2)
}


legend('topleft', c(expression(paste("Pre-Burn")),expression(paste("Post-Burn"))),
       lty=c("solid","solid"),col=c("blue","red"),lwd=c(4,2),cex=0.9) 

#dev.off()

```

# Seasonality  
```{r}

library(dplyr)

# Separate out GW vs. SW
temp_gwsw = unique(merge(violYY_uniq,
                         PWS_inventory_2017_gwsw[,c("PWSID","GW.or.SW")],
                         by='PWSID',all.x=T))
viol_Q_gwsw = unique(temp_gwsw[complete.cases(temp_gwsw[,c("GW.or.SW")]),])
viol_Q_gw = temp_gwsw[temp_gwsw$GW.or.SW == "Groundwater",]
viol_Q_sw = temp_gwsw[temp_gwsw$GW.or.SW == "Surface water",]

# Total Number of violations per quarter
viol_season = 
  viol_Q_sw %>% 
  group_by(QUARTER) %>% 
  summarise(Total_Viol = n())

# Mean number of violations each quarter - avg over the years after sum for each yr
viol_season2 = 
  viol_Q_sw %>% 
  group_by(QUARTER,YEAR) %>% 
  summarise(Total_Viol = n())

viol_season3 = 
  viol_season2 %>% 
  group_by(QUARTER) %>% 
  summarise(Mean_Viol = mean(Total_Viol),
            Stderr_Viol = sd(Total_Viol)/n())
  
# Plot Totals
ggplot(data=viol_season, aes(x=QUARTER,y=Total_Viol)) + 
  geom_bar(stat="identity")#+
  # ggtitle( "Nitrate")+
  # labs(x="Max Consecutive Years System was in Violation",y="Number of Systems")+
  # theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  # #scale_y_continuous(breaks= seq(0, 80, by = 5))+
  # scale_x_continuous(breaks= seq(0, 11, by = 0.5))+
  # theme(axis.title=element_text(size=30))+
  # theme(axis.text=element_text(size=20))+
  # theme(plot.title=element_text(size=30))

# Plot Means
ggplot(data=viol_season3, aes(x=QUARTER,y=Mean_Viol)) + 
  geom_bar(stat="identity")+
  geom_errorbar(aes(ymin=Mean_Viol-Stderr_Viol, ymax=Mean_Viol+Stderr_Viol), 
                width=.2,position=position_dodge(.9))
# ggtitle( "Nitrate")+
  # labs(x="Max Consecutive Years System was in Violation",y="Number of Systems")+
  # theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  # #scale_y_continuous(breaks= seq(0, 80, by = 5))+
  # scale_x_continuous(breaks= seq(0, 11, by = 0.5))+
  # theme(axis.title=element_text(size=30))+
  # theme(axis.text=element_text(size=20))+
  # theme(plot.title=element_text(size=30))


```

# Persistance
* Y = # with sig increase, sig decrease, or no change
* x = Window 1-6 years including burn year
```{r}


persist = rbind(numbers_1yrA,numbers_2yrA)
persist = rbind(persist,numbers_3yrA)
persist = rbind(persist,numbers_4yrA)
persist = rbind(persist,numbers_5yrA)
persist = rbind(persist,numbers_6yrA)
persist = rbind(persist,numbers_7yrA)
persist = rbind(persist,numbers_8yrA)
persist = rbind(persist,numbers_9yrA)

persist_n = data.frame(Window = c('1 year','2 year', '3 year','4 year',
                                   '5 year','6 year','7 year','8 year','9 year'))

persist = cbind(persist_n,persist)

ggplot(data=persist, aes(x=Window,y=Num_Burn_Larger)) + 
  geom_bar(stat="identity")
ggplot(data=persist, aes(x=Window,y=Num_Burn_Smaller)) + 
  geom_bar(stat="identity")
ggplot(data=persist, aes(x=Window,y=Num_Burn_Same)) + 
  geom_bar(stat="identity")
persist$Num_Burn_Same

# Rearrange df so it is in long form, not wide form (transpose)
library(reshape)
persist2 <- melt(persist, id.vars = "Window")

temp1 = persist2[persist2$variable == 'Num_Burn_Larger' | 
                  persist2$variable == 'Num_Burn_Same' ,]

temp2 = persist2[persist2$variable == 'Pct_Burn_Larger' | 
                  persist2$variable == 'Pct_Burn_Same' ,]

# Change factor order
temp1$variable <- factor(temp1$variable, 
                     levels = c("Num_Burn_Same","Num_Burn_Larger"))
temp2$variable <- factor(temp2$variable, 
                     levels = c("Pct_Burn_Same","Pct_Burn_Larger"))

mypal = c("blue","red")

# Add stacked bar for PWS.Type into each Water Source Bar
ggplot(data = temp1, aes(x = Window, y=value,fill = variable))+ 
    geom_bar(stat="identity") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Catchments")+
  guides(fill = guide_legend(title="", reverse=F))+
  scale_fill_manual(values = mypal,
                      labels=c("No Change",
                               "More Violations Post-Burn"))+  
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=20))+
  theme(plot.title=element_text(size=20,hjust=0.5))+
  theme(legend.text=element_text(size=20))+
  guides(fill = guide_legend(ncol=1,title="", reverse=FALSE))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))

# Add stacked bar for PWS.Type into each Water Source Bar
ggplot(data = temp2, aes(x = Window, y=value,fill = variable ))+ 
    geom_bar(stat="identity") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  scale_fill_manual(values = mypal,
                      labels=c("No Change",
                               "More Violations Post-Burn"))+  
  labs(x=" ",y="% of Catchments")+
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=20))+
  theme(plot.title=element_text(size=20,hjust=0.5))+
  theme(legend.text=element_text(size=20))+
  guides(fill = guide_legend(ncol=1,title="", reverse=FALSE))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))
  

```

# Export COMIDs
```{r}

Map_COMIDs = as.data.frame(Map_COMIDs)
names(Map_COMIDs)[1] = 'COMID'

# NO3
#write.csv(Map_COMIDs,paste0(m_dir,'Data/NO3_Burned_Catchments.csv'),row.names=F)

```

# Export Burn Effected COMIDS
```{r}

# Burn Larger
#NO3
#write.csv(ID_Larger,paste0(m_dir,'Data/NO3_Burned_Larger_Catchments.csv'),row.names=F)


# Burn Smaller
#NO3
#write.csv(ID_Smaller,paste0(m_dir,'Data/NO3_Burned_Smaller_Catchments.csv'),row.names=F)


# Burn Same
#NO3
write.csv(ID_Same,paste0(m_dir,'Data/NO3_Burned_Same_Catchments.csv'),row.names=F)



```


#****

# Watershed Characteristics
```{r}
dev.off()
library(fst)
library(gridExtra)
library(ggplot2)

Data_dir = '...'
m_dir = '...'

# Burn Catchment IDS
ID_Larger = read.csv(paste0(m_dir,'Data/NO3_Burned_Larger_Catchments.csv'))
ID_Smaller = read.csv(paste0(m_dir,'Data/NO3_Burned_Smaller_Catchments.csv'))
ID_Same = read.csv(paste0(m_dir,'Data/NO3_Burned_Same_Catchments.csv'))

# Read in StreamCat + Other Metrics
Cat.All.Vars2 = read_fst(paste0(Data_dir,"Cat.All.Vars2_All_Cats.fst"))

# Combine Datasets
ID_Larger$Category  = "Larger"
ID_Smaller$Category = "Smaller"
ID_Same$Category = "Same"

Fire_IDs = rbind(ID_Larger,ID_Smaller,ID_Same)

Fire_Vars = merge(Fire_IDs,Cat.All.Vars2,by='COMID')

# Boxplot
# Mean % Forest
Fire_Vars$pct_forest_Cat = Fire_Vars$PctDecid2011Cat + Fire_Vars$PctConif2011Cat + Fire_Vars$PctMxFst2011Cat
Fire_Vars$pct_forest_Ws = Fire_Vars$PctDecid2011Ws + Fire_Vars$PctConif2011Ws + Fire_Vars$PctMxFst2011Ws

# % Developed
Fire_Vars$pct_developed_Cat =  Fire_Vars$PctUrbLo2011Cat + Fire_Vars$PctUrbMd2011Cat + Fire_Vars$PctUrbHi2011Cat
Fire_Vars$pct_developed_Ws =  Fire_Vars$PctUrbLo2011Ws + Fire_Vars$PctUrbMd2011Ws + Fire_Vars$PctUrbHi2011Ws

p1 = ggplot(Fire_Vars, aes(x=Category, y=pct_forest_Cat)) + geom_boxplot()+
  labs(y="% Forest in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p2 = ggplot(Fire_Vars, aes(x=Category, y=pct_forest_Ws)) + geom_boxplot()+
  labs(y="% Forest in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p3 = ggplot(Fire_Vars, aes(x=Category, y=PctCrop2011Cat)) + geom_boxplot()+
  labs(y="% Cropland in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p4 = ggplot(Fire_Vars, aes(x=Category, y=PctCrop2011Ws)) + geom_boxplot()+
  labs(y="% Cropland in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p5 = ggplot(Fire_Vars, aes(x=Category, y=pct_developed_Cat)) + geom_boxplot()+
  labs(y="% Developed in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p6 = ggplot(Fire_Vars, aes(x=Category, y=pct_developed_Ws)) + geom_boxplot()+
  labs(y="% Developed in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p7 = ggplot(Fire_Vars, aes(x=Category, y=BurnPctAvg08to15Cat)) + geom_boxplot()+
  labs(y="% Burned in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p8 = ggplot(Fire_Vars, aes(x=Category, y=BurnPctAvg08to15Ws)) + geom_boxplot()+
  labs(y="% Burned in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines 

p9 = ggplot(Fire_Vars, aes(x=Category, y=Hillslope_PctCat)) + geom_boxplot()+
  labs(y="% Hillslope in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p10 = ggplot(Fire_Vars, aes(x=Category, y=Hillslope_PctWs)) + geom_boxplot()+
  labs(y="% Hillslope in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines 
p11 = ggplot(Fire_Vars, aes(x=Category, y=Precip8110Cat)) + geom_boxplot()+
  labs(y="30-year Mean Precip. (mm) in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p12 = ggplot(Fire_Vars, aes(x=Category, y=Precip8110Ws)) + geom_boxplot()+
  labs(y="30-year Mean Precip. (mm) in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines 
p13 = ggplot(Fire_Vars, aes(x=Category, y=RunoffCat)) + geom_boxplot()+
  labs(y="Runoff (mm) in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p14 = ggplot(Fire_Vars, aes(x=Category, y=RunoffWs)) + geom_boxplot()+
  labs(y="Runoff (mm) in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines 
p15 = ggplot(Fire_Vars, aes(x=Category, y=Tmean8110Cat)) + geom_boxplot()+
  labs(y="30-year Mean Temp.(Cยฐ) in Catchment",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines  
p16 = ggplot(Fire_Vars, aes(x=Category, y=Tmean8110Ws)) + geom_boxplot()+
  labs(y="30-year Mean Temp.(Cยฐ) in Watershed",x="")+
  theme(axis.title=element_text(size=10))+
  theme(axis.text=element_text(size=10))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines 

grid.arrange(p1,p3,p5,p7,p2,p4,p6,p8,nrow=2,ncol=4)
grid.arrange(p9,p11,p13,p15,p10,p12,p14,p16,nrow=2,ncol=4)


# boxplot(Fire_Vars$pct_forest_Cat ~ Fire_Vars$Category,
#         ylab="% Forest in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$pct_forest_Ws ~ Fire_Vars$Category,
#         ylab="% Forest in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$PctCrop2011Cat ~ Fire_Vars$Category,
#         ylab="% Cropland in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$PctCrop2011Ws ~ Fire_Vars$Category,
#         ylab="% Cropland in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$pct_developed_Cat ~ Fire_Vars$Category,
#         ylab="% Developed in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$pct_developed_Ws ~ Fire_Vars$Category,
#         ylab="% Developed in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$BurnPctAvg08to15Cat ~ Fire_Vars$Category,
#         ylab="% Burned in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$BurnPctAvg08to15Ws ~ Fire_Vars$Category,
#         ylab="% Burned in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$Hillslope_PctCat ~ Fire_Vars$Category,
#         ylab="% Hillslope in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$Hillslope_PctWs ~ Fire_Vars$Category,
#         ylab="% Hillslope in Watershed",  cex.lab=1.4, cex.axis=1.4)
# 
# boxplot(Fire_Vars$Tmean8110Cat ~ Fire_Vars$Category,
#         ylab="30-year normal Mean Temperature (Cยฐ) in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$Tmean8110Ws ~ Fire_Vars$Category,
#         ylab="30-year normal Mean Temperature (Cยฐ) in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$Precip8110Cat ~ Fire_Vars$Category,
#         ylab="30-year normal mean precipitation (mm) in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$Precip8110Ws ~ Fire_Vars$Category,
#         ylab="30-year normal mean precipitation (mm) in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$BFICat ~ Fire_Vars$Category,
#         ylab="Baseflow Index in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$BFIWs ~ Fire_Vars$Category,
#         ylab="Baseflow Index in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$RunoffCat ~ Fire_Vars$Category,
#         ylab="Runoff (mm) in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$RunoffWs ~ Fire_Vars$Category,
#         ylab="Runoff (mm) in Watershed",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$ElevCat ~ Fire_Vars$Category,
#         ylab="Mean Elevation (m) in Catchment",  cex.lab=1.4, cex.axis=1.4)
# boxplot(Fire_Vars$ElevWs ~ Fire_Vars$Category,
#         ylab="Mean Elevation (m) in Watershed",  cex.lab=1.4, cex.axis=1.4)


#t.test(Fire_Vars$pct_forest_Cat ~ Fire_Vars$Category) # p-value = 0.8704
#wilcox.test(Fire_Vars$pct_forest_Cat ~ Fire_Vars$Category) # p-value = 0.9091




```

#*************************************
#*************************************


